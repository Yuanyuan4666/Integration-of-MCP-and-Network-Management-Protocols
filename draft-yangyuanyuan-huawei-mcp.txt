



HuaWei                                                       Y. Yuanyuan
Internet-Draft                                                    HuaWei
Intended status: Informational                               18 May 2025
Expires: 19 November 2025


                                  MCP
                  draft-yangyuanyuan-huawei-mcp-latest

Abstract

   With the emergence of various LLM models, enterprises face different
   frameworks or systems during deployment.  For each LLM model, a
   corresponding toolchain needs to be developed, causing significant
   inconvenience.  This document introduces MCP(Model Context Protocol),
   a technology that can effectively manage different LLM models.
   Further, this document discusses the application of MCP in cross-
   vendor network equipment batch management and proposes corresponding
   deployment strategies.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://example.com/LATEST.  Status information for this document may
   be found at https://datatracker.ietf.org/doc/draft-yangyuanyuan-
   huawei-mcp/.

   Discussion of this document takes place on the HW Working Group
   mailing list (mailto:yangyuanyuan55@huawei.com), which is archived at
   https://example.com/WG.

   Source for this draft and an issue tracker can be found at
   https://github.com/USER/REPO.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 19 November 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology & Notation Conventions
     2.1.  MCP
     2.2.  Others
   3.  Market Demand
     3.1.  Inconsistent YANG Model Support
     3.2.  Partial or Non-Standard RESTCONF/NETCONF Implementations
     3.3.  Performance & Scalability Issues
   4.  Solution
   5.  Deployment Plan
     5.1.  Preliminary Research
     5.2.  Development and Test
     5.3.  Deployment
       5.3.1.  MCP within Local NCE
       5.3.2.  MCP in Remote Device
       5.3.3.  Gap Analysis
   6.  IANA Considerations
   7.  Security Considerations
   Appendix A.  Conclusion
   Appendix B.  Reference
   Author's Address

1.  Introduction

   With the emergence of various LLM models, enterprises face different
   frameworks and systems during deployment, such as ChatGPT's plugin
   mechanism and agent frameworks.  Adapting to these mechanisms
   requires developing distinct toolchains, which increases development
   costs.  Additionally, LLMs rely on contextual data, but various
   agents retrieve local and remote data in a fragmented manner, lacking
   a unified management approach.

   In this context, MCP provides a universal, open standard that offers
   LLMs a standardized way to transmit contextual information,
   simplifying the integration of AI models with data and tools.  This
   draft analyzes the market demand in the scenario of cross-vendor
   network equipment batch management, the advantages of MCP, and the
   deployment plan, while also evaluating the pros and cons of two
   deployment strategies.

2.  Terminology & Notation Conventions

   The following terms are used throughout this document:

2.1.  MCP

   *  *Host*: The entity initiating the LLM request

   *  *Client*: A built-in module within a host, specifically designed
      for interaction with the MCP server.

   *  *CLI*: Command Line Interface

   *  *MCP Server*: A dedicated server that interacts with MCP clients
      and provides MCP services.

   *  *MCP protocol*: The whole MCP framework

2.2.  Others

   *  *LLM*: Large Language Model

   *  *Netconf*: Network Configuration Protocol

   *  *Restconf*: RESTful Network Configuration Protocol

   *  *SNMP*: Simple Network Management Protocol

3.  Market Demand

   In the scenario of cross-vendor network equipment batch management, a
   large number of devices from different vendors need to be uniformly
   managed, which can lead to the following issues:

3.1.  Inconsistent YANG Model Support

   Different vendors implement different YANG models (standard or
   proprietary), leading to:

   *  Lack of uniform data structures for configuration/retrieval.

   *  Requirement for vendor-specific adaptations in automation scripts.

3.2.  Partial or Non-Standard RESTCONF/NETCONF Implementations

   Some vendors only partially support standard YANG models, and
   proprietary extensions may break interoperability.

3.3.  Performance & Scalability Issues

   When managing cross-vendor devices in bulk, NETCONF can be slower
   than RESTCONF (HTTP/HTTPS) for large-scale operations, while RESTCONF
   lacks native batching support.  Additionally, both protocols may
   suffer from timeouts when handling many devices simultaneously.

4.  Solution

   The LLM model, with its ability to comprehend diverse complex
   requirements and deliver corresponding functionalities, is well-
   suited for cross-vendor network equipment batch management,
   effectively addressing the aforementioned challenges.  Therefore, we
   have introduced the MCP protocol to standardize the management of
   different LLM models, serving as the foundation for building an
   intelligent network control platform.

   To be more specific, there are three parts:

   *  Encapsulating diverse device operations into discrete MCP tools
      for host-side calling.

   *  Exposing LLM model APIs that transform natural language
      instructions into executable tool operations.

   *  Achieving the "language/text command -> automated execution"
      closed loop.

5.  Deployment Plan

5.1.  Preliminary Research

   Conduct a detailed survey of the existing multi-vendor network device
   environment, analyzing the support status of NETCONF and RESTCONF
   protocols across different vendors' equipment, as well as identifying
   data model variations.  This will provide foundational data for
   subsequent MCP adaptation and development.

5.2.  Development and Test

   Based on the research findings, develop MCP system modules compatible
   with NETCONF and RESTCONF protocols to achieve accurate conversion
   from natural language commands to protocol operations.  Conduct
   comprehensive testing in a lab environment to validate MCPâ€™s
   functionality and performance in multi-vendor device batch
   management, with a focus on protocol compatibility and operational
   accuracy.

5.3.  Deployment

   During the deployment phase, there are three key aspects to consider:

   *  *Function-Specific MCP Servers*: Deploy dedicated MCP servers
      tailored to different functions and domains, such as network log
      analysis, device configuration management, energy consumption
      management, and security operations.

   *  *Secure and Scalable Architecture*: Implement stringent security
      measures to ensure only authorized AI models and users can access
      and control network resources via MCP.

   *  *Automated Workflows*: Leverage MCP to enable LLM-coordinated
      multi-tool automation, supporting real-time monitoring,
      diagnostics, and fault remediation.

   Based on these considerations, we propose two solutions:

5.3.1.  MCP within Local NCE

   The user issues a natural language command, which is received by the
   operations and maintenance (O&M) console and forwarded to the MCP
   client.  The LLM then processes the command, invokes the appropriate
   tools to pass instructions to the MCP server, which finally interacts
   with network devices using NETCONF and SNMP protocols.

5.3.2.  MCP in Remote Device

   The main workflow is similar to _MCP within Local NCE_, with the key
   difference being the integration method of the MCP server.  In this
   solution, the MCP server is integrated in the network devices.
   Within the network device, the MCP server interacts with network
   devices via CLI instead of NETCONF and SNMP protocols.

5.3.3.  Gap Analysis

   *  *Scalability*: While _MCP within Local NCE_ offers compatibility
      through NETCONF incorporation, its tightly-coupled dual-protocol
      architecture creates technical debt for scaling.  The MCP-Remote
      Device approach's protocol homogeneity ensures architectural
      consistency, future-proofing the solution for iterative
      enhancements.

   *  *Cost*: The _MCP within Local NCE_ implementation enables
      localized adaptation while preserving NETCONF/SNMP protocol
      compliance for downstream device communication, fully capitalizing
      on existing NETCONF investments.  Comparatively, the MCP deployed
      in Remote Devices architecture operates without NETCONF
      integration, resulting in significantly higher deployment and
      operational expenditures.

6.  IANA Considerations

   This document has no IANA actions.

7.  Security Considerations

   This document analyzes the application of MCP in sophisticated batch
   network management and proposes two deployment schemes, which may
   introduce certain security risks.  Since MCP's internal instructions
   are invisible to users and only accessible to the LLM model,
   attackers could potentially inject malicious instructions, leading to
   information leakage or workflow errors.

   To address such security risks, measures like version locking
   mechanisms, enhanced visibility, and context isolation can provide a
   certain level of protection.

Appendix A.  Conclusion

   MCP Technology delivers an innovative solution for cross-vendor
   network device management at scale.  By enhancing and extending
   traditional network management protocols (NETCONF/RESTCONF), it
   effectively addresses multi-vendor device management challenges while
   significantly improving network administration efficiency and service
   quality.  As the technology matures, MCP is positioned for widespread
   adoption in network management domains.

Appendix B.  Reference

Author's Address

   Yang Yuanyuan
   HuaWei
   Email: yangyuanyuan55@huawei.com

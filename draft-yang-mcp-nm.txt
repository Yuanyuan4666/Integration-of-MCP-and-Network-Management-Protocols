



nmrg                                                         Y. Yuanyuan
Internet-Draft                                                    HuaWei
Intended status: Informational                               25 May 2025
Expires: 26 November 2025


          Integration of MCP and Network Management Protocols
                        draft-yang-mcp-nm-latest

Abstract

   With the emergence of various LLM models, enterprises face different
   frameworks or systems during deployment.  For each LLM model, a
   corresponding toolchain needs to be developed, causing significant
   inconvenience.  This document introduces MCP(Model Context Protocol),
   a technology that can effectively manage different LLM models.
   Further, this document discusses the application of MCP in cross-
   vendor network equipment batch management and proposes corresponding
   deployment strategies.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://example.com/LATEST.  Status information for this document may
   be found at https://datatracker.ietf.org/doc/draft-yang-mcp-nm/.

   Discussion of this document takes place on the nmrg Working Group
   mailing list (mailto:yangyuanyuan55@huawei.com), which is archived at
   https://example.com/WG.

   Source for this draft and an issue tracker can be found at
   https://github.com/USER/REPO.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 26 November 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology & Notation Conventions
     2.1.  MCP
     2.2.  Others
   3.  Problem Statemtent
     3.1.  Inconsistent YANG Model Support
     3.2.  Partial or Non-Standard RESTCONF/NETCONF Implementations
     3.3.  Performance & Scalability Issues
   4.  Operational Consideration
     4.1.  Functional Modules
       4.1.1.  Encapsulating Device Operations into MCP Tools
       4.1.2.  LLM APIs for Words-to-Tool Translation
       4.1.3.  Closed-Loop Automation Execution
     4.2.  Workflow
     4.3.  MCP within Network Controller
       4.3.1.  Use cases
     4.4.  MCP in Remote Device
       4.4.1.  Use cases
   5.  Conclusion
   6.  IANA Considerations
   7.  Security Considerations
   Appendix A.  Reference
   Author's Address

1.  Introduction

   With the emergence of various LLM models, enterprises face different
   frameworks and systems during deployment, such as ChatGPT's plugin
   mechanism and agent frameworks.  Adapting to these mechanisms
   requires developing distinct toolchains, which increases development
   costs.  Additionally, LLMs rely on contextual data, but various
   agents retrieve local and remote data in a fragmented manner, lacking
   a unified management approach.

   The Model Control Protocol (MCP) provides a standardized framework
   for intent-based network automation in multi-vendor environments,
   specifically addressing the interoperability challenges between large
   language models (LLMs) and heterogeneous network equipment.  By
   establishing vendor-neutral interfaces for tool encapsulation, intent
   translation, and closed-loop execution, MCP enables:

   *  Unified operation abstraction through normalized MCP tool
      definitions

   *  Seamless LLM integration via structured API contracts

   *  Closed-Loop Automation Execution

   Further, this document specifies MCP's architecture and operational
   workflows for network automation scenarios, with particular focus on:

   *  The end-to-end processing chain from natural language input to
      device configuration

   *  Protocol translation requirements between AI systems and network
      elements

   *  Comparative analysis of on-premises versus cloud-hosted deployment
      models

2.  Terminology & Notation Conventions

   The following terms are used throughout this document:

2.1.  MCP

   *  *Host*: The entity initiating the LLM request

   *  *Client*: A built-in module within a host, specifically designed
      for interaction with the MCP server.

   *  *CLI*: Command Line Interface

   *  *MCP Server*: A dedicated server that interacts with MCP clients
      and provides MCP services.

   *  *MCP protocol*: The whole MCP framework

2.2.  Others

   *  *LLM*: Large Language Model

   *  *Netconf*: Network Configuration Protocol

   *  *Restconf*: RESTful Network Configuration Protocol

   *  *SNMP*: Simple Network Management Protocol

3.  Problem Statemtent

   In the scenario of cross-vendor network equipment batch management, a
   large number of devices from different vendors need to be uniformly
   managed, which can lead to the following issues:

3.1.  Inconsistent YANG Model Support

   Different vendors implement different YANG models (standard or
   proprietary), leading to:

   *  Lack of uniform data structures for configuration/retrieval.

   *  Requirement for vendor-specific adaptations in automation scripts.

3.2.  Partial or Non-Standard RESTCONF/NETCONF Implementations

   Some vendors only partially support standard YANG models, and
   proprietary extensions may break interoperability.

3.3.  Performance & Scalability Issues

   When managing cross-vendor devices in bulk, NETCONF can be slower
   than RESTCONF (HTTP/HTTPS) for large-scale operations, while RESTCONF
   lacks native batching support.  Additionally, both protocols may
   suffer from timeouts when handling many devices simultaneously.

4.  Operational Consideration

4.1.  Functional Modules

   The LLM model, with its ability to comprehend diverse complex
   requirements and deliver corresponding functionalities, is well-
   suited for cross-vendor network equipment batch management,
   effectively addressing the aforementioned challenges.  Therefore, we
   have introduced the MCP protocol to standardize the management of
   different LLM models, serving as the foundation for building an
   intelligent network control platform.

   To be more specific, there are three functional modules needed:

4.1.1.  Encapsulating Device Operations into MCP Tools

   *  _Objective_: Standardize heterogeneous device operations into
      modular, reusable tools.

   *  _Implementation_:

      -  _Tool Abstraction_: Vendor-specific commands are wrapped into
         discrete MCP Tools with uniform schemas.

      -  _Tool Registry_: A centralized repository hosts MCP Tools with
         metadata (e.g., vendor compatibility, privilege requirements).

      -  _Dynamic Loading_: MCP Servers dynamically invoke required
         tools via NETCONF on demand, thereby decoupling tool lifecycle
         management from the server's core functionality.

   *  _Benefits_:

      -  Eliminates manual translation of commands across vendors.

      -  Enables plug-and-play integration of new device types.

4.1.2.  LLM APIs for Words-to-Tool Translation

   *  Objective: Bridge natural language instructions to executable tool
      sequences.

   *  Workflow:

      -  Command Parsing: LLM APIs (e.g., GPT-4, Claude) process user
         queries like "Upgrade all switches in Datacenter A during
         maintenance" into structured commands.

      -  Toolchain Generation: The LLM selects and sequences MCP Tools
         (e.g., get_inventory → schedule_downtime → download_firmware →
         validate_upgrade).

      -  Validation: Pre-execution checks verify tool compatibility with
         target devices.

   *  APIs Exposed:

      -  mcp-translate: Converts words to toolchain JSON.

      -  mcp-validate: Confirms tool availability/permissions.

4.1.3.  Closed-Loop Automation Execution

   *  Objective: Achieve end-to-end automation from language input to
      network changes.

   *  Execution Flow:

      -  User Input: Operator submits request via chat/voice (e.g.,
         "Block TCP port 22 on all edge routers").

      -  LLM Processing:

         o  Intent → Toolchain: Identifies get_edge_routers +
            configure_acl tools.

         o  Parameter Binding: Maps "TCP port 22" to {"protocol": "tcp",
            "port": 22, "action": "deny"}.

      -  Orchestration: MCP Runtime schedules tools, handles
         dependencies (e.g., backup configs first), and enforces RBAC.

      -  Feedback: Real-time logs/rollback if configure_acl fails on any
         device.

   *  Key Features:

      -  Idempotency: Tools safely retry/rollback.

      -  Auditability: Full traceability of LLM decisions and tool
         executions.

4.2.  Workflow

   A general workflow is as follows:

   *  User Input Submission: An operator submits a natural language
      request (e.g., "Disable port 22 on all edge switches") to the LLM
      interface.

   *  LLM Intent Processing: The LLM parses the input, identifies the
      operational intent, and forwards a structured request to the local
      O&M Console for validation and logging.

   *  MCP Tool Discovery: The O&M Console routes the request to the MCP
      Client, which queries the MCP Server to retrieve the available
      tools.

   *  LLM Toolchain Decision:

      -  The LLM evaluates the context and if tools are required, select
         and sequence tools.

      -  The decision is sent back to the MCP Client and then MCP Client
         will execute tools via server.

   *  Protocol Translation & Execution: The MCP Server executes the
      translated commands on target devices and returns results to the
      client.

   *  Result Aggregation & Feedback: The MCP Client collates tool
      outputs (success/failure logs) and forwards them to the LLM for
      summarization.

   While the overall workflow remains consistent, the MCP Server's
   deployment location (on-premises or remote) introduces operational
   variations.  This section defines two refined approaches to
   accommodate differing deployment scenarios.

4.3.  MCP within Network Controller

       +--------------+
       |     User     |
       +-------+------+
               |
       Natural Language
       Request |
    ......................
    .  +-------+------+  .N
    .  |     LLM      |  .E
    .  +-------+------+  .T
    .          |         .W
    .    O&M Console     .O
    .          |         .R
    .  +-------+------+  .K
    .  |  MCP Client  |  .
    .  +-------+------+  .C
    .          |         .O
    .   Tools Request    .N
    .          |         .T
    .  +-------+------+  .R
    .  |  MCP Server  |  .O
    .  +-------+------+  .L
    .          |         .L
    .          |         .E
    ...........|..........R
               |
           Netconf
       +--------------+
       |   Network    |
       |   Devices    |
       +--------------+

   *  Scope: The MCP Server is hosted within the operator's local
      network, colocated with the O&M Console and MCP Client.

   *  Key Characteristics:

      -  Low Latency: Direct access to network devices minimizes tool
         execution delays.

      -  Data Control: All processing (LLM queries, tool executions)
         remains within the operator’s infrastructure.

4.3.1.  Use cases

   *  Air-Gapped Networks (Military/Critical Infrastructure)

      -  Scenario: A power grid control network prohibits external
         connectivity.

      -  Implementation:

         o  MCP Server runs on local servers with pre-loaded tool
            definitions.

         o  LLM operates offline (e.g., quantized model) or via approved
            internal APIs.

      -  Advantage: Ensures zero data exfiltration risks.

4.4.  MCP in Remote Device

  +--------------+
  |     User     |
  +-------+------+
          |
  Natural Language
  Request |    ......................    .  +-------+------+  .    .  |     LLM      |  .    .  +-------+------+  .    .          |         .    .    O&M Console     .    .          |         .R O    .  +-------+------+  .K L    .  |  MCP Client  |  .  L    .  +-------+------+  .  L    .          |         .  E    .   Tools Request    .  R    .          |         .    ......................    ......................    .  +-------+------+  .N D    .  |  MCP Server  |  .E E    .  +-------+------+  .T V    .          |         .W I    .  +--------------+  .O C    .  |   Network    |  .R E    .  |   Devices    |  .K    .  +--------------+  .    ......................

   *  Scope: The MCP Server operates in a cloud environment, serving
      distributed MCP Clients via public/private APIs.

   *  Key Characteristics:

      -  Centralized Management: A single MCP Server instance can manage
         multiple geographically dispersed networks.

      -  Scalability: Cloud-native scaling accommodates dynamic tool
         registry updates and high request volumes.

4.4.1.  Use cases

   *  Global Enterprise Network Automation

      -  Scenario: A multinational corporation standardizes
         configurations across hundreds of branch offices.

      -  Implementation:

         o  MCP Server hosted on AWS/Azure with regional replicas.

         o  Tools like deploy_vpn_template adapt to local compliance
            rules.

      -  Advantage: Unified toolchain reduces configuration drift.

5.  Conclusion

6.  IANA Considerations

   This document has no IANA actions.

7.  Security Considerations

Appendix A.  Reference

Author's Address

   Yang Yuanyuan
   HuaWei
   Email: yangyuanyuan55@huawei.com
